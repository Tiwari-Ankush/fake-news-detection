# -*- coding: utf-8 -*-
"""Fake_News_Prediciton_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12TrLScjwf-qvS3BQtY0Ffi8quRpekj7m

#FAKE NEWS DETECTION
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

#printing stopwords
print(stopwords.words('english'))

"""Data preprocessing"""

news_dataset = pd.read_csv('/content/train.csv')

news_dataset.shape

news_dataset.head()

#counting the missing values in dataset
news_dataset.isnull().sum()

#replacing the null values with empty string
news_dataset = news_dataset.fillna('')

print(news_dataset.columns)

# Check column types
print(news_dataset.dtypes)

# Convert columns to string if needed
news_dataset['Statement'] = news_dataset['Statement'].astype(str)
news_dataset['Label'] = news_dataset['Label'].astype(str)

# Concatenate 'Statement' and 'Label' into 'content'
news_dataset['content'] = news_dataset['Statement'] + ' ' + news_dataset['Label']

# merging the author name and news title
news_dataset['content'] = news_dataset['Statement']+' '+news_dataset['Label']

print(news_dataset['content'])

# separating the data and label
X = news_dataset.drop(columns = 'Label', axis=1)
Y = news_dataset['Label']
print(X)
print(Y)

"""Stemming - reducing the word to its root word
actor, actress,acting ---> act
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]',' ', content) # re- regular expression [''] removes all things excepta-zA-Z
  stemmed_content = stemmed_content.lower() #converting all to lowercase
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

# separate the data and label
X=  news_dataset['content'].values
Y = news_dataset['Label'].values

print(X)

print(Y)

Y.shape

# converting textual data to numerical data using Tfidf-Term frequency Inverse document frequency
vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

"""Splitting dataset to taining and  test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

"""Training the model using Logistic Regression"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Accuracy score"""

# accuracy score on training data
X_train_prediction = model.predict(X_train) #model=Logistic Regression
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data: ', training_data_accuracy)

# accuracy score on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy for test data: ', test_data_accuracy)

"""Making predictive System
1 : FAKE news
0 : REAL news
"""

X_new = X_test[8]
prediction = model.predict(X_new)
print(prediction)

if(prediction[0]==0):
  print('the news is REAL')
else:
  print('The news is FAKE')

print(Y_test[8])

